В C++ статические переменные могут отличаться друг от друга по нескольким признакам, несмотря на то, что у них общий признак — статическая продолжительность хранения (они живут на протяжении всей программы). Вот ключевые различия, которые могут быть между двумя статическими переменными:

1. Область видимости (scope)
Внутри функции:

cpp
Копировать
Редактировать
void foo() {
    static int x = 0;
}
Видна только внутри этой функции.

Внутри класса (static-член):

cpp
Копировать
Редактировать
class MyClass {
    static int count;
};
Общая для всех объектов класса. Объявляется внутри, но определяется снаружи:

cpp
Копировать
Редактировать
int MyClass::count = 0;
На уровне файла (вне функций и классов):

cpp
Копировать
Редактировать
static int globalVar = 5;
Видна только в этом файле (ограничение по компиляции — internal linkage).

Без static на уровне файла:

cpp
Копировать
Редактировать
int globalVar = 5;
Эта переменная будет иметь external linkage — может использоваться в других файлах через extern.

2. Связь (linkage)
static вне функции → internal linkage: не видно в других файлах.

extern без static → external linkage: видно в других файлах.

3. Контекст использования
Статическая локальная переменная:

Сохраняет значение между вызовами функции.

Инициализируется только один раз.

Статическая переменная-член класса:

Разделяется между всеми объектами.

Не требует создания объекта для доступа (если public).

static const или static constexpr в классе:

Можно использовать как compile-time константы.

4. Инициализация
Может отличаться значением, временем и способом инициализации:

Простое присваивание.

Конструктор.

Ленивая инициализация (в C++11+ через static внутри функции с объектом).

Пример всех отличий:
cpp
Копировать
Редактировать
#include <iostream>

int globalVar = 1;             // External linkage
static int staticGlobal = 2;   // Internal linkage

class MyClass {
public:
    static int sharedVar;     // Static class member
    static const int constVal = 5; // Constexpr-like
};

int MyClass::sharedVar = 10;

void foo() {
    static int counter = 0;   // Local static
    counter++;
    std::cout << "Counter: " << counter << std::endl;
}
