#include <iostream>
#include <string>
#include <array>
#include <limits>

enum class InputPosition {
    first_number,
    second_number,
    COUNT          //Модульный код, это счетчик количество позиций чисел типо у меня он означает что у меня 2 числа всего
};

constexpr std::array<std::string_view, static_cast<size_t>(InputPosition::COUNT)> inputPosition{ // явное приведение типа static_cast<size_t>(InputPosition::COUNT), потому что enum class нельзя неявно преобразовывать к целым числам (в отличие от обычного enum).
    "first",																			 // size_t — тип, используемый в массивах и контейнерах для размеров и индексов (беззнаковый).
    "second"
};

void printResult();
int userPrintInteger(InputPosition numberPosition);
void ignoreLine(); 
void inputError();
std::string_view printPositionNumber(InputPosition position);

int main()
{
    printResult();
}

int userPrintInteger(InputPosition numberPosition)
{

    while (true)
    {
        std::cout << "Enter a " << printPositionNumber(numberPosition) << " value : ";

        int userInteger{};

        std::cin >> userInteger;


        if (std::cin.fail())
        {
            inputError();

            continue;
        }

        return userInteger;
    }
}

void printResult()
{

    //std::cout << "Enter a smaller integer: ";

    int smallerIntenger{ userPrintInteger(InputPosition::first_number), };

    //std::cout << "Enter a larger integer: ";

    int largerIntenger{ userPrintInteger(InputPosition::second_number) };

    if (smallerIntenger > largerIntenger)
    {
        int temp{ smallerIntenger };

        //temp = ;

        smallerIntenger = largerIntenger;

        largerIntenger = temp;

        //    std::cout << "The smaller value is " << smallerIntenger << '\n';

        //    std::cout << "The larger value is " << largerIntenger << '\n';

    }
    else
    {
        //    std::cout << "The smaller value is " << smallerIntenger << '\n';

        //    std::cout << "The larger value is " << largerIntenger << '\n';
    }

    std::cout << "The smaller value is " << smallerIntenger << '\n';

    std::cout << "The larger value is " << largerIntenger << '\n';


}

void ignoreLine()
{
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

void inputError()
{
    std::cin.clear();

    ignoreLine();

    std::cout << "Oops, that input is invalid.  Please try again.\n";
}

std::string_view printPositionNumber(InputPosition position)
{
    return inputPosition[static_cast<size_t>(position)];
}
